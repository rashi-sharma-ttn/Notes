The objects that form the backbone of your application and that are managed by the Spring IoC container
are called beans. A bean is an object that is instantiated, assembled, and otherwise managed by a Spring
IoC container.

Scope ---
To force Spring to produce a new bean instance each time one is needed, you should declare the bean's scope
attribute to be prototype. Similarly, if you want Spring to return the same bean instance each time one is
needed, you should declare the bean's scope attribute to be singleton.

   1. Singleton (Default)
   2. Prototype
   3. Request - This scopes a bean definition to an HTTP request. Only valid in the context of a web-aware
      Spring ApplicationContext.
   4. Session - This scopes a bean definition to an HTTP session. Only valid in the context of a web-aware
      Spring ApplicationContext.

CODE-
     <!-- A bean definition with singleton scope -->
     <bean id = "..." class = "..." scope = "singleton">
       <!-- collaborators and configuration for this bean go here -->
     </bean>


LIFECYCLE-
Bean is instantiated, it may be required to perform some initialization to get it into a usable state.
When the bean is no longer required and is removed from the container, some cleanup may be required.

<bean> with initmethod and/or destroy-method parameters. The init-method attribute specifies a method that
is to be called on the bean immediately upon instantiation. Similarly, destroy method specifies a method
that is called just before a bean is removed from the container.

  CODE -
         <bean id = "exampleBean" class = "examples.ExampleBean" init-method = "init"   OR   destroy-method = "destroy"/>



