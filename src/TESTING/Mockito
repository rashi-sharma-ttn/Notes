It is a Java-based library used to create simple and basic test APIs for performing unit testing of Java
applications. It can also be used with other frameworks such as JUnit and TestNG.

The main purpose of using the Mockito framework is to simplify the development of a test by mocking
external dependencies and use them in the test code. As a result, it provides a simpler test code that is
easier to read, understand, and modify.

                                              NEED FOR MOCKITO
No handwriting: no requirement for writing your mock objects.

Safe refactoring: While renaming the method name of an interface or interchanging the parameters do not
                  change the test code, as mock objects are created at runtime.
Exception support: supports the exception. Stack trace is used to find the cause of the exception.

Annotation support: creates mock objects using annotations like @Mock.

Order support: provides a check on the order of the method calls.


                                              UNIT TESTING
Unit testing is a software testing technique in which individual components/parts of the software is tested,
The aim of unit testing is to isolate a segment of code (unit) and verifies its correctness.
A unit is referred to as an individual function or procedure (program).


                                                  MOCKING
Mocking is a process of developing the objects that act as the mock or clone of the real objects.In other
words, mocking is a testing technique where mock objects are used instead of real objects for testing
purposes. Mock objects provide a specific (dummy) output for a particular (dummy) input passed to it.

To mock objects, you need to understand the three key concepts of mocking, i.e., stub, fake, and mock.
    Stub: Stub objects hold predefined data and provide it to answer the calls during testing. Stub object
          is generally used for state verification.
          Stubs are objects that return predefined values. Like mocks, they don’t have working
          implementations. However, unlike mocks, they are not programmed to expect specific calls.
          Instead, they return values when they are called.
          Example
               A stub might be programmed to always return the same value when called with any arguments.

    Fake: Fakes are objects that have working implementations. A fake object implements the same interface
          as a real object but takes shortcuts to improve performance. Fakes are generally used when we
          need to test something that depends on an external service or API, and we don’t want to make
          actual calls to that service.
          Example
             An in-memory database is a fake because it implements the same interface as a real database
             but doesn’t use disk storage. It makes it much faster than a real database, but it also means
             that the data is only persisted in memory and will be lost when the application restarts.

    Mock: Mock objects act as a dummy or clone of the real object in testing.
          Mocks are objects that have predefined behavior. These objects register calls they receive,
          allowing us to assert how we use them in the code. Unlike fakes, mocks don’t have working
          implementations. Instead, they have pre-programmed expectations about how they will be used in
          the code.
          Example
             We can use mocks to verify that our code is calling the dependencies in an expected way.



                                          NEED FOR MOCKING
1) If we want to test a component that depends on the other component, but it is under development.
   In this case, mocking plays an essential role in the testing of that component. Without mocking,
   we need to wait for the completion of the required elements for testing.

2)If the real components perform slow operations while dealing with database connections, we require
  mock objects to perform testing, and it can be done via mocking.

3)If there is an infrastructure concern that makes the testing impossible. When we create a connection to
  the database, some issues related to configurations occur. It requires mocking for creating mock
  components to provide unit testing.